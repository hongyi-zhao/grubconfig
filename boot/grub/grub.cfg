# 预先加载一些模块，以备使用：
    insmod part_msdos
    insmod ntfs
    insmod part_gpt
    insmod ext2
    insmod iso9660
    insmod regexp
    insmod loopback
    insmod chain
    insmod gzio

# Add the following for using by FreeBSD. 
# I'm not sure whether these modules have been loaded, so do the following:
    insmod ufs2
    insmod zfs
    insmod bsd


# 采用新的命名规范：
# absolute directory name:
# 含设备名的：
# x_abs_dirname=$x_root$x_dirname
# x_abs_name=$x_root$x_name=$x_root$x_dirname$x_basename
# 不含设备名的： 
# x_name=$x_dirname$x_basename
# x_dirname
# x_basename



# 如何根据特定的文件来判断是那个操作系统。
# 就目前所用的 debian 和 Ubuntu 来说，可以使用下面的方法简单区分：
   
# debian 的 boot 目录有如下文件，且版本号唯一：
#  /boot/vmlinuz-*-amd64
#  /boot/initrd.img-*-amd64   
     
# Ubuntu 的 boot 目录有如下链接，指向实际所用的文件：
# /boot/vmlinuz
# /boot/initrd.img


# 保留原始变量，以便后续还原：
set origroot=$root

# Don't use (*)/ROOT/default/@/boot/loader.efi for searching the FreeBSD, 
# it will fail in most case due to the zfs filesystem's characteristics.

for loader in (*)/boot/vmlinuz-*-amd64    \
              (*)/boot/vmlinuz            \
              (*)/boot/vmlinuz-linux      \
              (*)/boot/vmlinuz-*-x86_64   \
              (*)/EFI/freebsd/loader.efi; do
  if [ -e "$loader" ]; then
    regexp -s 1:loader_root -s 2:loader_dirname -s 3:loader_basename '^(\(.*\))(/.*/)([^/]+)$' "$loader"
    if regexp '^vmlinuz-.*-amd64$' "$loader_basename"; then
      menuentry "Debian GNU/Linux -> $loader_root" "$loader_root" "$loader_dirname$loader_basename" {
        # both the following regexp can be used to match the device name：
        # 
        # '^(\(.*\))'
        # '^\((.*)\)' 

        # but the first includes () in the result, while the latter not.
        # In the former case, when invoking the var，shouldn't use () ,
        # the exception is that the var's name is root, in this case, the 
        # () will be stripped automatically.  
        # so ($root) is correct。while ($var) is wrong for the former case. 
  
        set root=$2
        set vmlinuz_name=$3
        probe --set root_uuid --fs-uuid $root
        regexp -s initrd_name '^(.*)$' /boot/initrd.img-*-amd64    
    
        linux  $vmlinuz_name root=UUID=$root_uuid ro  
        initrd  $initrd_name
        # 还原变量设定，菜单中其他的条目才能使用相关的默认配置文件：
        set root=$origroot

        # 在非交互模式，隐含的最后一个命令就是 boot：
        #https://www.gnu.org/software/grub/manual/grub/grub.html#boot
        #16.3.8 boot

        #Command: boot

        # Boot the OS or chain-loader which has been loaded. 
        # Only necessary if running the fully interactive command-line (it is implicit at the end of a menu entry). 
      }

    elif regexp '^vmlinuz$' "$loader_basename"; then
      menuentry "Ubuntu -> $loader_root" "$loader_root" "$loader_dirname$loader_basename" {
        set root=$2
        set vmlinuz_name=$3
        probe --set root_uuid --fs-uuid $root
        regexp -s initrd_name '^(.*)$' /boot/initrd.img   
    
        linux  $vmlinuz_name root=UUID=$root_uuid ro  
        initrd  $initrd_name
        set root=$origroot     
      }
    elif regexp '^vmlinuz-linux$' "$loader_basename"; then
      menuentry "Arch Linux -> $loader_root" "$loader_root" "$loader_dirname$loader_basename" {
        set root=$2
        set vmlinuz_name=$3
        probe --set root_uuid --fs-uuid $root
        regexp -s initrd_name '^(.*)$' /boot/initramfs-linux.img     
    
        linux  $vmlinuz_name root=UUID=$root_uuid ro  
        initrd  $initrd_name
        set root=$origroot    
      }
    elif regexp '^vmlinuz-.*-x86_64$' "$loader_basename"; then
      menuentry "Manjaro Linux -> $loader_root" "$loader_root" "$loader_dirname$loader_basename" {
        set root=$2
        set vmlinuz_name=$3
        probe --set root_uuid --fs-uuid $root
        regexp -s initrd_name '^(.*)$' /boot/initramfs-*-x86_64-fallback.img     
    
        linux  $vmlinuz_name root=UUID=$root_uuid ro  
        initrd  $initrd_name
        set root=$origroot    
      }

    elif regexp '^loader[.]efi$' "$loader_basename"; then 
      menuentry "FreeBSD -> $loader_root" "$loader_root" "$loader_dirname$loader_basename" {
        loader_root="$2"
        loader_name="$3"  
        set root=$loader_root
        chainloader $loader_name 
        set root=$origroot
      }      
    fi
  fi   
done


### BEGIN /usr/local/etc/grub.d/41_custom ###
if [ -f  ${config_directory}/custom.cfg ]; then
  source ${config_directory}/custom.cfg
elif [ -z "${config_directory}" -a -f  $prefix/custom.cfg ]; then
  source $prefix/custom.cfg;
fi
### END /usr/local/etc/grub.d/41_custom ###

