#$ sudo blkid -o list |grep /dev/sda3
#/dev/sda3  ext4             /media/werner/e3e084db-7f7f-47cb-866b-743b7c5758ec1 e3e084db-7f7f-47cb-866b-743b7c5758ec

# 观察到的 grub-install 内部会这样调用：

# 分别使用 /usr/sbin/grub-install ， /usr/local/sbin/grub-install 进行 efi安装，加上 -v , 搜索 log。即可。

# grub-mkimage --directory '/usr/local/lib/grub/x86_64-efi' --prefix '(,gpt3)/grubconfig.git/boot/grub' --output '/mnt/sda3/grubconfig.git/boot/grub/x86_64-efi/core.efi'  --dtb '' --format 'x86_64-efi' --compression 'auto'  'ext2' 'part_gpt'

# or

# 我又加了  fat part_msdos 模块。

# sudo /usr/bin/grub-mkimage --directory '/usr/lib/grub/x86_64-efi' --prefix '/grubconfig.git/boot/grub' --output '/mnt/sda3/grubconfig.git/boot/grub/x86_64-efi/core.efi' --format 'x86_64-efi' --compression 'auto'  --config '/mnt/sda3/grubconfig.git/boot/grub/x86_64-efi/load.cfg' fat part_msdos 'ext2' 'part_gpt' 'search_fs_uuid' configfile

# sudo blkid -o list | grep /dev/sda3
# /dev/sda3  ext4             /media/werner/e3e084db-7f7f-47cb-866b-743b7c5758ec1 e3e084db-7f7f-47cb-866b-743b7c5758ec






#grub-mkstandalone 基于 grub-mkimage 的工作方式如下：
#$ sudo grub-mkstandalone -O x86_64-efi -o grub-mkstandalone-x86_64.efi --modules='fat part_msdos part_gpt ext2 regexp iso9660 loopback chain search configfile test normal'  boot/grub/grub.cfg=./grub-mkstandalone.cfg -v |& grep -E 'grub-mkimage'
#grub-mkstandalone: info: grub-mkimage --directory '/usr/lib/grub/x86_64-efi' --prefix '(memdisk)/boot/grub' --output 'grub-mkstandalone-x86_64.efi' --format 'x86_64-efi' --compression 'auto'  --memdisk '/tmp/grub.wXtx3a' 'fat' 'part_msdos' 'part_gpt' 'ext2' 'regexp' 'iso9660' 'loopback' 'chain' 'search' 'configfile' 'test' 'normal' 'memdisk' 'tar'

#man grub-mkimage 有下面的选项：

#       -m,                              --memdisk=FILE
#              embed FILE as a memdisk image

#       Implies `-p (memdisk)/boot/grub' and overrides

#       any prefix supplied previously, but the prefix
#              itself can be overridden by later options

#这正是 grub-mkstandalone 基于 grub-mkimage 的工作方式。

#在这个处理过程中，root=(memdisk)， prefix=(memdisk)/boot/grub


# 该文件是以下面的命令被调用的：
# 所以，其中的变量设定不会影响环境。
# configfile ${cmdpath}/grug.cfg

#https://www.gnu.org/software/grub/manual/grub/grub.html#cmdpath
#15.1.4 cmdpath

#The location from which core.img was loaded as an absolute directory name (see File name syntax). This is set by GRUB at startup based on information returned by platform firmware. Not every platform provides this information and some may return only device without path name. 

# 基于 cmdpath 去寻找相应的 设定：
# 确保 调用本文件的efi 和 后续的 boot 目录 位于同一盘上，从而保证可移植性。

regexp -s cmdpath_dev '^\(([^,]+)' "$cmdpath"

# 用下面的文件来做定位器（placeholder）：
for file in ($cmdpath_dev,*)/multibootusb.git/grub.cfg; do
  # use __ as global customized vars prefix:
  # If the regexp module is loaded and the wild expansion is done correctly，the following
  # is enough to ensure that the corresponding device is found:
  if regexp -s __root '^(\([^*]+\))' "$file"; then  
    # 按照上面的匹配形式，下面的写法不能加 ():

    # 这种问题，实际上并不容易发现。
    # 一个比较好的调试方法是：
    # 使用 source 的形式，然后，运行set 进行观察相关变量的结果。

    # 但是 root 是一个特殊变量，当采用它作为变量名时，() 会被自动去掉。
    # 这个情况，从 debian install dvd 的 /EFI/debian/grub.cfg 中也可以得到证实。
    
    # 所以，如果从 root 变量进行设定其他的变量，因为赋值给root时()被自动去掉了，所以要如下使用：
    # set prefix=($root)/boot/grub
    # 但是，若变量名不是root，则根据上面的匹配规则，已经包含了()在匹配结果内，所以使用如下的形式就可以了：
    set __prefix=$__root/multibootusb.git

    # export root prefix
    export __root
    export __prefix
    
    # 如果下面的命令是最后一条语句，是可以省略的：
    configfile $__prefix/grub.cfg
    break
  fi
done





